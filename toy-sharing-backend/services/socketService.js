const socketIO = require("socket.io");
const jwt = require("jsonwebtoken");
const chatService = require("./chatService");

class SocketService {
  constructor() {
    this.io = null;
    this.connectedUsers = new Map(); // Map ƒë·ªÉ l∆∞u user online: userId -> socketId
  }

  // Kh·ªüi t·∫°o Socket.IO
  initialize(server) {
    this.io = socketIO(server, {
      cors: {
        origin: process.env.CLIENT_URL || "http://localhost:3001",
        methods: ["GET", "POST"],
        credentials: true,
      },
    });

    this.setupSocketHandlers();
    console.log("‚úÖ Socket.IO initialized");
  }

  // Thi·∫øt l·∫≠p c√°c event handlers
  setupSocketHandlers() {
    this.io.use(async (socket, next) => {
      try {
        // X√°c th·ª±c token t·ª´ query ho·∫∑c headers
        const token =
          socket.handshake.auth.token || socket.handshake.query.token;

        if (!token) {
          return next(new Error("Authentication error: No token provided"));
        }

        // Verify JWT token
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        socket.userId = decoded.id;
        socket.username = decoded.username;

        next();
      } catch (error) {
        next(new Error("Authentication error: Invalid token"));
      }
    });

    this.io.on("connection", (socket) => {
      console.log(`üîå User connected: ${socket.username} (${socket.userId})`);

      // L∆∞u user v√†o danh s√°ch online
      this.connectedUsers.set(socket.userId, socket.id);

      // G·ª≠i danh s√°ch user online cho t·∫•t c·∫£
      this.broadcastOnlineUsers();

      // X·ª≠ l√Ω g·ª≠i tin nh·∫Øn
      socket.on("send_message", async (data) => {
        try {
          const { receiverId, content, messageType = "text" } = data;

          if (!receiverId || !content) {
            socket.emit("error", {
              message: "Thi·∫øu th√¥ng tin receiverId ho·∫∑c content",
            });
            return;
          }

          // L∆∞u tin nh·∫Øn v√†o database
          const savedMessage = await chatService.sendMessage(
            socket.userId,
            receiverId,
            content,
            messageType
          );

          // G·ª≠i tin nh·∫Øn cho ng∆∞·ªùi nh·∫≠n n·∫øu online
          const receiverSocketId = this.connectedUsers.get(receiverId);
          if (receiverSocketId) {
            this.io.to(receiverSocketId).emit("new_message", {
              message: savedMessage,
              sender: {
                id: socket.userId,
                username: socket.username,
              },
            });
          }

          // G·ª≠i x√°c nh·∫≠n cho ng∆∞·ªùi g·ª≠i
          socket.emit("message_sent", {
            success: true,
            message: savedMessage,
          });

          // G·ª≠i notification cho ng∆∞·ªùi nh·∫≠n n·∫øu offline
          if (!receiverSocketId) {
            // C√≥ th·ªÉ g·ª≠i push notification ·ªü ƒë√¢y
            console.log(
              `User ${receiverId} is offline, message saved to database`
            );
          }
        } catch (error) {
          socket.emit("error", {
            message: `L·ªói g·ª≠i tin nh·∫Øn: ${error.message}`,
          });
        }
      });

      // X·ª≠ l√Ω typing indicator
      socket.on("typing_start", (data) => {
        const { receiverId } = data;
        const receiverSocketId = this.connectedUsers.get(receiverId);

        if (receiverSocketId) {
          this.io.to(receiverSocketId).emit("user_typing", {
            userId: socket.userId,
            username: socket.username,
          });
        }
      });

      socket.on("typing_stop", (data) => {
        const { receiverId } = data;
        const receiverSocketId = this.connectedUsers.get(receiverId);

        if (receiverSocketId) {
          this.io.to(receiverSocketId).emit("user_stop_typing", {
            userId: socket.userId,
          });
        }
      });

      // X·ª≠ l√Ω ƒë√°nh d·∫•u tin nh·∫Øn ƒë√£ ƒë·ªçc
      socket.on("mark_read", async (data) => {
        try {
          const { senderId } = data;

          await chatService.markMessagesAsRead(socket.userId, senderId);

          // Th√¥ng b√°o cho ng∆∞·ªùi g·ª≠i bi·∫øt tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c ƒë·ªçc
          const senderSocketId = this.connectedUsers.get(senderId);
          if (senderSocketId) {
            this.io.to(senderSocketId).emit("messages_read", {
              readerId: socket.userId,
              readerUsername: socket.username,
            });
          }
        } catch (error) {
          socket.emit("error", {
            message: `L·ªói ƒë√°nh d·∫•u tin nh·∫Øn ƒë√£ ƒë·ªçc: ${error.message}`,
          });
        }
      });

      // X·ª≠ l√Ω join v√†o conversation
      socket.on("join_conversation", (data) => {
        const { conversationId } = data;
        socket.join(conversationId);
        console.log(
          `User ${socket.username} joined conversation: ${conversationId}`
        );
      });

      // X·ª≠ l√Ω leave conversation
      socket.on("leave_conversation", (data) => {
        const { conversationId } = data;
        socket.leave(conversationId);
        console.log(
          `User ${socket.username} left conversation: ${conversationId}`
        );
      });

      // X·ª≠ l√Ω disconnect
      socket.on("disconnect", () => {
        console.log(
          `üîå User disconnected: ${socket.username} (${socket.userId})`
        );

        // X√≥a user kh·ªèi danh s√°ch online
        this.connectedUsers.delete(socket.userId);

        // G·ª≠i danh s√°ch user online m·ªõi cho t·∫•t c·∫£
        this.broadcastOnlineUsers();
      });
    });
  }

  // G·ª≠i danh s√°ch user online cho t·∫•t c·∫£
  broadcastOnlineUsers() {
    const onlineUsers = Array.from(this.connectedUsers.keys());
    this.io.emit("online_users", onlineUsers);
  }

  // G·ª≠i tin nh·∫Øn cho m·ªôt user c·ª• th·ªÉ
  sendToUser(userId, event, data) {
    const socketId = this.connectedUsers.get(userId);
    if (socketId) {
      this.io.to(socketId).emit(event, data);
    }
  }

  // G·ª≠i tin nh·∫Øn cho t·∫•t c·∫£ user
  broadcastToAll(event, data) {
    this.io.emit(event, data);
  }

  // L·∫•y s·ªë user ƒëang online
  getOnlineUsersCount() {
    return this.connectedUsers.size;
  }

  // Ki·ªÉm tra user c√≥ online kh√¥ng
  isUserOnline(userId) {
    return this.connectedUsers.has(userId);
  }
}

module.exports = new SocketService();
