import { useQuery, useMutation, useQueryClient } from 'react-query'
import api from '@/services/api'
import toast from 'react-hot-toast'

// Booking service functions
const bookingsService = {
  getBookings: async (params = {}) => {
    const query = new URLSearchParams(params).toString()
    const url = query ? `/bookings?${query}` : '/bookings'
    const response = await api.get(url)
    return response.data.data
  },

  getBooking: async (id) => {
    const response = await api.get(`/bookings/${id}`)
    return response.data.data.booking
  },

  createBooking: async (bookingData) => {
    const response = await api.post('/bookings', bookingData)
    return response.data.data.booking
  },

  updateBookingStatus: async ({ id, status}) => {
    const response = await api.put(`/bookings/${id}/status`, {
      status
    })
    return response.data.data.booking
  },

  returnToy: async (id) => {
    const response = await api.put(`/bookings/${id}/return`)
    return response.data.data.booking
  },

  checkExpiredBookings: async () => {
    const response = await api.post('/bookings/check-expired')
    return response.data.data
  },

  rateBooking: async ({ id, score, comment }) => {
    const response = await api.put(`/bookings/${id}/rate`, {
      score,
      comment
    })
    return response.data.data.booking
  }
}

// Query keys
export const BOOKINGS_QUERY_KEYS = {
  all: ['bookings'],
  lists: () => [...BOOKINGS_QUERY_KEYS.all, 'list'],
  list: (filters) => [...BOOKINGS_QUERY_KEYS.lists(), filters],
  details: () => [...BOOKINGS_QUERY_KEYS.all, 'detail'],
  detail: (id) => [...BOOKINGS_QUERY_KEYS.details(), id],
}

// Hook ƒë·ªÉ l·∫•y danh s√°ch bookings
export const useBookings = (params = {}, options = {}) => {
  return useQuery(
    BOOKINGS_QUERY_KEYS.list(params),
    () => bookingsService.getBookings(params),
    {
      staleTime: 2 * 60 * 1000, // 2 minutes
      keepPreviousData: true,
      ...options
    }
  )
}

// Hook ƒë·ªÉ l·∫•y chi ti·∫øt booking
export const useBooking = (id, options = {}) => {
  return useQuery(
    BOOKINGS_QUERY_KEYS.detail(id),
    () => bookingsService.getBooking(id),
    {
      enabled: !!id,
      staleTime: 1 * 60 * 1000, // 1 minute
      ...options
    }
  )
}

// Hook ƒë·ªÉ t·∫°o booking m·ªõi
export const useCreateBooking = (options = {}) => {
  const queryClient = useQueryClient()

  return useMutation(
    (bookingData) => bookingsService.createBooking(bookingData),
    {
      onSuccess: (newBooking) => {
        // Invalidate bookings list
        queryClient.invalidateQueries(BOOKINGS_QUERY_KEYS.lists())

        toast.success('G·ª≠i y√™u c·∫ßu m∆∞·ª£n th√†nh c√¥ng! üìÖ', {
          icon: 'üéâ',
          duration: 4000
        })

        options.onSuccess?.(newBooking)
      },
      onError: (error) => {
        console.error('Create booking error:', error)
        options.onError?.(error)
      }
    }
  )
}

// Hook ƒë·ªÉ c·∫≠p nh·∫≠t status booking
export const useUpdateBookingStatus = (options = {}) => {
  const queryClient = useQueryClient()

  return useMutation(
    (updateData) => bookingsService.updateBookingStatus(updateData),
    {
      onSuccess: (updatedBooking) => {
        // Update cache
        queryClient.invalidateQueries(BOOKINGS_QUERY_KEYS.lists())
        queryClient.setQueryData(
          BOOKINGS_QUERY_KEYS.detail(updatedBooking._id),
          updatedBooking
        )

        const statusMessages = {
          confirmed: 'X√°c nh·∫≠n booking th√†nh c√¥ng! ‚úÖ',
          completed: 'Ho√†n th√†nh booking! üéä',
          cancelled: 'ƒê√£ h·ªßy booking! ‚ùå'
        }

        toast.success(statusMessages[updatedBooking.status] || 'C·∫≠p nh·∫≠t th√†nh c√¥ng!', {
          icon: updatedBooking.status === 'completed' ? 'üèÜ' : 'üìÖ'
        })

        options.onSuccess?.(updatedBooking)
      },
      onError: (error) => {
        console.error('Update booking status error:', error)
        options.onError?.(error)
      }
    }
  )
}

// Hook ƒë·ªÉ tr·∫£ ƒë·ªì ch∆°i
export const useReturnToy = (options = {}) => {
  const queryClient = useQueryClient()

  return useMutation(
    (bookingId) => bookingsService.returnToy(bookingId),
    {
      onSuccess: (returnedBooking) => {
        // Update cache
        queryClient.invalidateQueries(BOOKINGS_QUERY_KEYS.lists())
        queryClient.setQueryData(
          BOOKINGS_QUERY_KEYS.detail(returnedBooking._id),
          returnedBooking
        )

        toast.success('Tr·∫£ ƒë·ªì ch∆°i th√†nh c√¥ng! üéâ', {
          icon: '‚úÖ',
          duration: 4000
        })

        options.onSuccess?.(returnedBooking)
      },
      onError: (error) => {
        console.error('Return toy error:', error)
        const errorMessage = error.response?.data?.error?.message || 'Kh√¥ng th·ªÉ tr·∫£ ƒë·ªì ch∆°i. Vui l√≤ng th·ª≠ l·∫°i!'
        toast.error(errorMessage, {
          icon: '‚ùå',
          duration: 4000
        })
        options.onError?.(error)
      }
    }
  )
}

// Hook ƒë·ªÉ ki·ªÉm tra booking h·∫øt h·∫°n
export const useCheckExpiredBookings = (options = {}) => {
  const queryClient = useQueryClient()

  return useMutation(
    () => bookingsService.checkExpiredBookings(),
    {
      onSuccess: (data) => {
        // Update cache
        queryClient.invalidateQueries(BOOKINGS_QUERY_KEYS.lists())

        if (data.autoReturnedCount > 0) {
          toast.success(`ƒê√£ t·ª± ƒë·ªông tr·∫£ ${data.autoReturnedCount} ƒë·ªì ch∆°i h·∫øt h·∫°n! üîÑ`, {
            icon: '‚è∞',
            duration: 5000
          })
        } else {
          toast.success('Kh√¥ng c√≥ ƒë·ªì ch∆°i n√†o h·∫øt h·∫°n! ‚úÖ', {
            icon: 'üëç',
            duration: 3000
          })
        }

        options.onSuccess?.(data)
      },
      onError: (error) => {
        console.error('Check expired bookings error:', error)
        toast.error('Kh√¥ng th·ªÉ ki·ªÉm tra ƒë·ªì ch∆°i h·∫øt h·∫°n. Vui l√≤ng th·ª≠ l·∫°i!', {
          icon: '‚ùå',
          duration: 4000
        })
        options.onError?.(error)
      }
    }
  )
}

// Hook ƒë·ªÉ ƒë√°nh gi√° booking
export const useRateBooking = (options = {}) => {
  const queryClient = useQueryClient()

  return useMutation(
    (ratingData) => bookingsService.rateBooking(ratingData),
    {
      onSuccess: (ratedBooking) => {
        // Update cache
        queryClient.invalidateQueries(BOOKINGS_QUERY_KEYS.lists())
        queryClient.setQueryData(
          BOOKINGS_QUERY_KEYS.detail(ratedBooking._id),
          ratedBooking
        )

        toast.success('ƒê√°nh gi√° th√†nh c√¥ng! üåü', {
          icon: '‚≠ê',
          duration: 4000
        })

        options.onSuccess?.(ratedBooking)
      },
      onError: (error) => {
        console.error('Rate booking error:', error)
        const errorMessage = error.response?.data?.error?.message || 'Kh√¥ng th·ªÉ ƒë√°nh gi√°. Vui l√≤ng th·ª≠ l·∫°i!'
        toast.error(errorMessage, {
          icon: '‚ùå',
          duration: 4000
        })
        options.onError?.(error)
      }
    }
  )
}