import { useState } from 'react'
import { useNavigate } from 'react-router-dom'
import { useAuth } from '../../context/AuthContext'

const ToyCreate = () => {
  const navigate = useNavigate()
  const { user } = useAuth()
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [formData, setFormData] = useState({
    name: '',
    description: '',
    category: '',
    condition: '',
    ageGroup: '',
    images: [],
    features: [''],
    safetyNotes: [''],
    location: user?.profile?.location || ''
  })
  const [errors, setErrors] = useState({})

  const categories = {
    'educational': 'üìö Gi√°o d·ª•c',
    'construction': 'üß± X√¢y d·ª±ng', 
    'dolls': 'üß∏ B√∫p b√™',
    'vehicles': 'üöó Xe ƒë·ªì ch∆°i',
    'sports': '‚öΩ Th·ªÉ thao',
    'arts': 'üé® Ngh·ªá thu·∫≠t',
    'electronic': 'ü§ñ ƒêi·ªán t·ª≠',
    'other': 'üéÆ Kh√°c'
  }

  const conditions = {
    'new': 'M·ªõi',
    'like-new': 'Nh∆∞ m·ªõi',
    'good': 'T·ªët',
    'fair': '·ªîn'
  }

  const ageGroups = [
    '0-2 tu·ªïi', '3-5 tu·ªïi', '6-8 tu·ªïi', '9-12 tu·ªïi', '13+ tu·ªïi'
  ]

  const handleChange = (e) => {
    const { name, value } = e.target
    setFormData(prev => ({ ...prev, [name]: value }))
    if (errors[name]) {
      setErrors(prev => ({ ...prev, [name]: '' }))
    }
  }

  const handleArrayChange = (field, index, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: prev[field].map((item, i) => i === index ? value : item)
    }))
  }

  const addArrayItem = (field) => {
    setFormData(prev => ({
      ...prev,
      [field]: [...prev[field], '']
    }))
  }

  const removeArrayItem = (field, index) => {
    setFormData(prev => ({
      ...prev,
      [field]: prev[field].filter((_, i) => i !== index)
    }))
  }

  const validateForm = () => {
    const newErrors = {}
    if (!formData.name.trim()) newErrors.name = 'T√™n ƒë·ªì ch∆°i l√† b·∫Øt bu·ªôc'
    if (!formData.description.trim()) newErrors.description = 'M√¥ t·∫£ l√† b·∫Øt bu·ªôc'
    if (!formData.category) newErrors.category = 'Danh m·ª•c l√† b·∫Øt bu·ªôc'
    if (!formData.condition) newErrors.condition = 'T√¨nh tr·∫°ng l√† b·∫Øt bu·ªôc'
    if (!formData.ageGroup) newErrors.ageGroup = 'ƒê·ªô tu·ªïi ph√π h·ª£p l√† b·∫Øt bu·ªôc'

    setErrors(newErrors)
    return Object.keys(newErrors).length === 0
  }

  const handleSubmit = async (e) => {
    e.preventDefault()
    if (!validateForm()) return

    setIsSubmitting(true)
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 2000))

      // Mock success
      alert('ƒê·ªì ch∆°i ƒë√£ ƒë∆∞·ª£c ƒëƒÉng th√†nh c√¥ng! üéâ')
      navigate('/my-toys')
    } catch (error) {
      alert('C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.')
    }
    setIsSubmitting(false)
  }

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-4xl mx-auto px-4">

        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">
            ‚ûï Th√™m ƒë·ªì ch∆°i m·ªõi
          </h1>
          <p className="text-gray-600">
            Chia s·∫ª ƒë·ªì ch∆°i c·ªßa b·∫°n v·ªõi c·ªông ƒë·ªìng
          </p>
        </div>

        {/* Form */}
        <div className="bg-white rounded-2xl shadow-lg p-8">
          <form onSubmit={handleSubmit} className="space-y-8">

            {/* Basic Info */}
            <div>
              <h2 className="text-xl font-semibold text-gray-900 mb-6">üìù Th√¥ng tin c∆° b·∫£n</h2>

              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">

                {/* Name */}
                <div className="lg:col-span-2">
                  <label className="block font-medium mb-2 text-gray-700">
                    T√™n ƒë·ªì ch∆°i <span className="text-red-500">*</span>
                  </label>
                  <input
                    type="text"
                    name="name"
                    value={formData.name}
                    onChange={handleChange}
                    className={`w-full px-4 py-3 border-2 rounded-xl focus:outline-none ${
                      errors.name ? 'border-red-500' : 'border-gray-200 focus:border-pink-500'
                    }`}
                    placeholder="VD: Robot Transformer Optimus Prime"
                    disabled={isSubmitting}
                  />
                  {errors.name && <div className="text-red-500 text-sm mt-2">{errors.name}</div>}
                </div>

                {/* Category */}
                <div>
                  <label className="block font-medium mb-2 text-gray-700">
                    Danh m·ª•c <span className="text-red-500">*</span>
                  </label>
                  <select
                    name="category"
                    value={formData.category}
                    onChange={handleChange}
                    className={`w-full px-4 py-3 border-2 rounded-xl focus:outline-none ${
                      errors.category ? 'border-red-500' : 'border-gray-200 focus:border-pink-500'
                    }`}
                    disabled={isSubmitting}
                  >
                    <option value="">Ch·ªçn danh m·ª•c</option>
                    {Object.entries(categories).map(([key, label]) => (
                      <option key={key} value={key}>{label}</option>
                    ))}
                  </select>
                  {errors.category && <div className="text-red-500 text-sm mt-2">{errors.category}</div>}
                </div>

                {/* Condition */}
                <div>
                  <label className="block font-medium mb-2 text-gray-700">
                    T√¨nh tr·∫°ng <span className="text-red-500">*</span>
                  </label>
                  <select
                    name="condition"
                    value={formData.condition}
                    onChange={handleChange}
                    className={`w-full px-4 py-3 border-2 rounded-xl focus:outline-none ${
                      errors.condition ? 'border-red-500' : 'border-gray-200 focus:border-pink-500'
                    }`}
                    disabled={isSubmitting}
                  >
                    <option value="">Ch·ªçn t√¨nh tr·∫°ng</option>
                    {Object.entries(conditions).map(([key, label]) => (
                      <option key={key} value={key}>{label}</option>
                    ))}
                  </select>
                  {errors.condition && <div className="text-red-500 text-sm mt-2">{errors.condition}</div>}
                </div>

                {/* Age Group */}
                <div>
                  <label className="block font-medium mb-2 text-gray-700">
                    ƒê·ªô tu·ªïi ph√π h·ª£p <span className="text-red-500">*</span>
                  </label>
                  <select
                    name="ageGroup"
                    value={formData.ageGroup}
                    onChange={handleChange}
                    className={`w-full px-4 py-3 border-2 rounded-xl focus:outline-none ${
                      errors.ageGroup ? 'border-red-500' : 'border-gray-200 focus:border-pink-500'
                    }`}
                    disabled={isSubmitting}
                  >
                    <option value="">Ch·ªçn ƒë·ªô tu·ªïi</option>
                    {ageGroups.map((age) => (
                      <option key={age} value={age}>{age}</option>
                    ))}
                  </select>
                  {errors.ageGroup && <div className="text-red-500 text-sm mt-2">{errors.ageGroup}</div>}
                </div>

                {/* Location */}
                <div>
                  <label className="block font-medium mb-2 text-gray-700">Khu v·ª±c</label>
                  <input
                    type="text"
                    name="location"
                    value={formData.location}
                    onChange={handleChange}
                    className="w-full px-4 py-3 border-2 border-gray-200 rounded-xl focus:outline-none focus:border-pink-500"
                    placeholder="VD: Qu·∫≠n 1, TP.HCM"
                    disabled={isSubmitting}
                  />
                </div>
              </div>
            </div>

            {/* Description */}
            <div>
              <label className="block font-medium mb-2 text-gray-700">
                M√¥ t·∫£ chi ti·∫øt <span className="text-red-500">*</span>
              </label>
              <textarea
                name="description"
                value={formData.description}
                onChange={handleChange}
                rows={5}
                className={`w-full px-4 py-3 border-2 rounded-xl focus:outline-none ${
                  errors.description ? 'border-red-500' : 'border-gray-200 focus:border-pink-500'
                }`}
                placeholder="M√¥ t·∫£ chi ti·∫øt v·ªÅ ƒë·ªì ch∆°i, t√¨nh tr·∫°ng, c√°ch s·ª≠ d·ª•ng..."
                disabled={isSubmitting}
              />
              {errors.description && <div className="text-red-500 text-sm mt-2">{errors.description}</div>}
            </div>

            {/* Features */}
            <div>
              <h3 className="text-lg font-semibold text-gray-900 mb-4">‚ú® ƒê·∫∑c ƒëi·ªÉm n·ªïi b·∫≠t</h3>
              {formData.features.map((feature, index) => (
                <div key={index} className="flex gap-3 mb-3">
                  <input
                    type="text"
                    value={feature}
                    onChange={(e) => handleArrayChange('features', index, e.target.value)}
                    className="flex-1 px-4 py-3 border-2 border-gray-200 rounded-xl focus:outline-none focus:border-pink-500"
                    placeholder="VD: Ch·∫•t li·ªáu nh·ª±a ABS an to√†n"
                    disabled={isSubmitting}
                  />
                  {formData.features.length > 1 && (
                    <button
                      type="button"
                      onClick={() => removeArrayItem('features', index)}
                      className="px-4 py-3 text-red-500 hover:bg-red-50 rounded-xl transition-colors"
                      disabled={isSubmitting}
                    >
                      üóëÔ∏è
                    </button>
                  )}
                </div>
              ))}
              <button
                type="button"
                onClick={() => addArrayItem('features')}
                className="text-pink-500 hover:text-pink-600 font-medium"
                disabled={isSubmitting}
              >
                ‚ûï Th√™m ƒë·∫∑c ƒëi·ªÉm
              </button>
            </div>

            {/* Safety Notes */}
            <div>
              <h3 className="text-lg font-semibold text-gray-900 mb-4">‚ö†Ô∏è L∆∞u √Ω an to√†n</h3>
              {formData.safetyNotes.map((note, index) => (
                <div key={index} className="flex gap-3 mb-3">
                  <input
                    type="text"
                    value={note}
                    onChange={(e) => handleArrayChange('safetyNotes', index, e.target.value)}
                    className="flex-1 px-4 py-3 border-2 border-gray-200 rounded-xl focus:outline-none focus:border-pink-500"
                    placeholder="VD: Kh√¥ng ph√π h·ª£p cho tr·∫ª d∆∞·ªõi 3 tu·ªïi"
                    disabled={isSubmitting}
                  />
                  {formData.safetyNotes.length > 1 && (
                    <button
                      type="button"
                      onClick={() => removeArrayItem('safetyNotes', index)}
                      className="px-4 py-3 text-red-500 hover:bg-red-50 rounded-xl transition-colors"
                      disabled={isSubmitting}
                    >
                      üóëÔ∏è
                    </button>
                  )}
                </div>
              ))}
              <button
                type="button"
                onClick={() => addArrayItem('safetyNotes')}
                className="text-pink-500 hover:text-pink-600 font-medium"
                disabled={isSubmitting}
              >
                ‚ûï Th√™m l∆∞u √Ω
              </button>
            </div>

            {/* Submit Buttons */}
            <div className="flex flex-col sm:flex-row gap-4 pt-6 border-t">
              <button
                type="button"
                onClick={() => navigate('/my-toys')}
                className="flex-1 px-6 py-4 border-2 border-gray-300 text-gray-700 rounded-xl font-semibold hover:bg-gray-50 transition-colors"
                disabled={isSubmitting}
              >
                H·ªßy
              </button>
              <button
                type="submit"
                className="flex-1 px-6 py-4 bg-pink-500 text-white rounded-xl font-semibold hover:bg-pink-600 transition-colors disabled:opacity-50"
                disabled={isSubmitting}
              >
                {isSubmitting ? (
                  <>
                    <span className="inline-block w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2"></span>
                    ƒêang ƒëƒÉng...
                  </>
                ) : (
                  'üöÄ ƒêƒÉng ƒë·ªì ch∆°i'
                )}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  )
}

export default ToyCreate