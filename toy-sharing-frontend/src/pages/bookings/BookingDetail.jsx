import { useParams, Link } from 'react-router-dom'
import { useBooking, useUpdateBookingStatus } from '@/hooks/useBookings'
import toast from 'react-hot-toast'

const BookingDetail = () => {
  const { id } = useParams()
  const { data: booking, isLoading: loading, error } = useBooking(id)
  const updateBookingStatus = useUpdateBookingStatus()

  // Handle booking cancellation
  const handleCancelBooking = async () => {
    if (window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën h·ªßy ƒë·∫∑t m∆∞·ª£n n√†y?')) {
      try {
        await updateBookingStatus.mutateAsync({
          id: booking._id || booking.id,
          status: 'cancelled'
        })
      } catch (error) {
        toast.error('Kh√¥ng th·ªÉ h·ªßy ƒë·∫∑t m∆∞·ª£n. Vui l√≤ng th·ª≠ l·∫°i!')
      }
    }
  }

  // Handle toy return
  const handleReturnToy = async () => {
    if (window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën tr·∫£ ƒë·ªì ch∆°i n√†y?')) {
      try {
        await updateBookingStatus.mutateAsync({
          id: booking._id || booking.id,
          status: 'completed'
        })
      } catch (error) {
        toast.error('Kh√¥ng th·ªÉ tr·∫£ ƒë·ªì ch∆°i. Vui l√≤ng th·ª≠ l·∫°i!')
      }
    }
  }

  // Map backend status to frontend display status
  const mapStatus = (status) => {
    const statusMap = {
      'requested': 'pending',
      'confirmed': 'active',
      'completed': 'completed',
      'cancelled': 'cancelled'
    }
    return statusMap[status] || status
  }

  // Generate timeline based on booking data
  const generateTimeline = (booking) => {
    if (!booking) return []
    
    const timeline = [
      { 
        date: booking.createdAt, 
        event: 'Y√™u c·∫ßu m∆∞·ª£n ƒë√£ ƒë∆∞·ª£c g·ª≠i', 
        status: 'completed' 
      }
    ]

    if (booking.status === 'confirmed' || booking.status === 'completed') {
      timeline.push({
        date: booking.updatedAt || booking.createdAt,
        event: 'Ch·ªß s·ªü h·ªØu ƒë√£ x√°c nh·∫≠n',
        status: 'completed'
      })
      
      timeline.push({
        date: booking.startDate,
        event: booking.status === 'completed' ? 'ƒê√£ nh·∫≠n ƒë·ªì ch∆°i' : 'D·ª± ki·∫øn nh·∫≠n ƒë·ªì ch∆°i',
        status: new Date(booking.startDate) <= new Date() ? 'completed' : 'pending'
      })
    }

    if (booking.status === 'completed') {
      timeline.push({
        date: booking.returnedAt || booking.endDate,
        event: 'ƒê√£ tr·∫£ v·ªÅ ƒë·ªì ch∆°i',
        status: 'completed'
      })
    } else if (booking.status === 'confirmed') {
      timeline.push({
        date: booking.endDate,
        event: 'D·ª± ki·∫øn tr·∫£ v·ªÅ',
        status: 'pending'
      })
    }

    if (booking.status === 'cancelled') {
      timeline.push({
        date: booking.updatedAt || booking.createdAt,
        event: 'ƒê√£ h·ªßy y√™u c·∫ßu',
        status: 'completed'
      })
    }

    return timeline
  }

  // Calculate booking duration
  const calculateDuration = (startDate, endDate) => {
    const start = new Date(startDate)
    const end = new Date(endDate)
    const diffTime = Math.abs(end - start)
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24))
    return diffDays
  }

  // Get category display info
  const getCategoryInfo = (category) => {
    const categoryMap = {
      'educational': { label: 'Gi√°o d·ª•c', icon: 'üìö', color: 'bg-blue-100 text-blue-600' },
      'electronic': { label: 'ƒêi·ªán t·ª≠', icon: 'ü§ñ', color: 'bg-purple-100 text-purple-600' },
      'outdoor': { label: 'Ngo√†i tr·ªùi', icon: 'üèÉ', color: 'bg-green-100 text-green-600' },
      'creative': { label: 'S√°ng t·∫°o', icon: 'üé®', color: 'bg-pink-100 text-pink-600' },
      'puzzle': { label: 'Tr√≤ ch∆°i', icon: 'üß©', color: 'bg-orange-100 text-orange-600' },
      'doll': { label: 'B√∫p b√™', icon: 'üë∂', color: 'bg-rose-100 text-rose-600' }
    }
    return categoryMap[category] || { label: 'Kh√°c', icon: 'üß∏', color: 'bg-gray-100 text-gray-600' }
  }

  // Get condition display info
  const getConditionInfo = (condition) => {
    const conditionMap = {
      'new': { label: 'M·ªõi', color: 'bg-green-100 text-green-600' },
      'like-new': { label: 'Nh∆∞ m·ªõi', color: 'bg-blue-100 text-blue-600' },
      'good': { label: 'T·ªët', color: 'bg-yellow-100 text-yellow-600' },
      'fair': { label: 'Kh√°', color: 'bg-orange-100 text-orange-600' }
    }
    return conditionMap[condition] || { label: 'Kh√¥ng x√°c ƒë·ªãnh', color: 'bg-gray-100 text-gray-600' }
  }

  const getStatusBadge = (status) => {
    const mappedStatus = mapStatus(status)
    const badges = {
      active: { label: 'ƒêang m∆∞·ª£n', color: 'bg-green-100 text-green-600', icon: 'üü¢' },
      pending: { label: 'Ch·ªù x√°c nh·∫≠n', color: 'bg-yellow-100 text-yellow-600', icon: 'üü°' },
      completed: { label: 'Ho√†n th√†nh', color: 'bg-blue-100 text-blue-600', icon: '‚úÖ' },
      cancelled: { label: 'ƒê√£ h·ªßy', color: 'bg-red-100 text-red-600', icon: '‚ùå' }
    }
    const badge = badges[mappedStatus] || { label: 'Kh√¥ng x√°c ƒë·ªãnh', color: 'bg-gray-100 text-gray-600', icon: '‚ùì' }
    return (
      <span className={`inline-flex items-center gap-1 px-3 py-1 rounded-full text-sm font-medium ${badge.color}`}>
        {badge.icon} {badge.label}
      </span>
    )
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50">
        <div className="max-w-7xl mx-auto px-4 py-16">
          <div className="text-center">
            <div className="w-16 h-16 border-4 border-gray-200 border-t-pink-500 rounded-full animate-spin mx-auto mb-4"></div>
            <p className="text-gray-600 text-lg">ƒêang t·∫£i chi ti·∫øt ƒë·∫∑t m∆∞·ª£n...</p>
          </div>
        </div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gray-50">
        <div className="max-w-7xl mx-auto px-4 py-16">
          <div className="text-center">
            <div className="text-6xl mb-4">‚ùå</div>
            <h3 className="text-2xl font-semibold text-gray-900 mb-2">
              Kh√¥ng th·ªÉ t·∫£i chi ti·∫øt ƒë·∫∑t m∆∞·ª£n
            </h3>
            <p className="text-gray-600 mb-6">
              ƒê√£ x·∫£y ra l·ªói khi t·∫£i d·ªØ li·ªáu. Vui l√≤ng th·ª≠ l·∫°i sau.
            </p>
            <Link 
              to="/bookings" 
              className="bg-pink-500 text-white px-6 py-3 rounded-xl font-semibold hover:bg-pink-600 transition-colors"
            >
              ‚Üê Quay l·∫°i danh s√°ch
            </Link>
          </div>
        </div>
      </div>
    )
  }

  if (!booking) {
    return (
      <div className="min-h-screen bg-gray-50">
        <div className="max-w-7xl mx-auto px-4 py-16">
          <div className="text-center">
            <h2 className="text-2xl font-bold text-gray-900 mb-4">Kh√¥ng t√¨m th·∫•y th√¥ng tin</h2>
            <Link to="/bookings" className="bg-pink-500 text-white px-6 py-3 rounded-xl font-semibold hover:bg-pink-600 transition-colors">
              Quay l·∫°i danh s√°ch
            </Link>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-4xl mx-auto px-4">

        {/* Header */}
        <div className="mb-8">
          <nav className="flex items-center space-x-2 text-sm text-gray-500 mb-4">
            <Link to="/bookings" className="text-pink-500 hover:text-pink-600">L·ªãch s·ª≠ m∆∞·ª£n</Link>
            <span>‚Ä∫</span>
            <span className="text-gray-700 font-medium">Chi ti·∫øt #{booking._id || booking.id}</span>
          </nav>

          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-3xl font-bold text-gray-900 mb-2">
                Chi ti·∫øt ƒë·∫∑t m∆∞·ª£n
              </h1>
              <p className="text-gray-600">M√£ ƒë·∫∑t m∆∞·ª£n: #{booking._id || booking.id}</p>
            </div>
            {getStatusBadge(booking.status)}
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">

          {/* Main Content */}
          <div className="lg:col-span-2 space-y-6">

            {/* Toy Info */}
            <div className="bg-white rounded-2xl shadow-lg p-6">
              <h2 className="text-xl font-semibold text-gray-900 mb-4">üß∏ Th√¥ng tin ƒë·ªì ch∆°i</h2>

              <div className="flex items-start space-x-4">
                <div className="w-24 h-24 bg-gradient-to-br from-pink-100 via-purple-100 to-blue-100 rounded-xl flex items-center justify-center overflow-hidden">
                  {booking.toy.images && booking.toy.images.length > 0 ? (
                    <img 
                      src={booking.toy.images[0]} 
                      alt={booking.toy.name}
                      className="w-full h-full object-cover"
                    />
                  ) : (
                    <span className="text-3xl">{getCategoryInfo(booking.toy.category).icon}</span>
                  )}
                </div>

                <div className="flex-1">
                  <h3 className="text-lg font-semibold text-gray-900 mb-2">
                    <Link to={`/toys/${booking.toy._id || booking.toy.id}`} className="hover:text-pink-500 transition-colors">
                      {booking.toy.name}
                    </Link>
                  </h3>
                  <p className="text-gray-600 text-sm mb-3">{booking.toy.description}</p>

                  <div className="flex gap-2">
                    <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${getCategoryInfo(booking.toy.category).color}`}>
                      {getCategoryInfo(booking.toy.category).icon} {getCategoryInfo(booking.toy.category).label}
                    </span>
                    <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${getConditionInfo(booking.toy.condition).color}`}>
                      {getConditionInfo(booking.toy.condition).label}
                    </span>
                  </div>
                </div>
              </div>
            </div>

            {/* Timeline */}
            <div className="bg-white rounded-2xl shadow-lg p-6">
              <h2 className="text-xl font-semibold text-gray-900 mb-6">üìÖ Ti·∫øn tr√¨nh</h2>

              <div className="space-y-4">
                {generateTimeline(booking).map((item, index) => (
                  <div key={index} className="flex items-start space-x-4">
                    <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                      item.status === 'completed' ? 'bg-green-100' : 'bg-gray-100'
                    }`}>
                      {item.status === 'completed' ? (
                        <span className="text-green-600 text-sm">‚úì</span>
                      ) : (
                        <span className="text-gray-400 text-sm">‚óã</span>
                      )}
                    </div>

                    <div className="flex-1">
                      <div className="flex items-center justify-between">
                        <h4 className={`font-medium ${
                          item.status === 'completed' ? 'text-gray-900' : 'text-gray-500'
                        }`}>
                          {item.event}
                        </h4>
                        <span className="text-sm text-gray-500">
                          {new Date(item.date).toLocaleDateString('vi-VN')}
                        </span>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Messages */}
            {(booking.message || booking.lenderResponse) && (
              <div className="bg-white rounded-2xl shadow-lg p-6">
                <h2 className="text-xl font-semibold text-gray-900 mb-4">üí¨ Tin nh·∫Øn</h2>
                
                {booking.message && (
                  <div className="mb-4">
                    <div className="text-sm text-gray-600 mb-2">L·ªùi nh·∫Øn t·ª´ b·∫°n:</div>
                    <p className="text-gray-700 bg-blue-50 rounded-lg p-4 border-l-4 border-blue-400">{booking.message}</p>
                  </div>
                )}
                
                {booking.lenderResponse && (
                  <div>
                    <div className="text-sm text-gray-600 mb-2">Ph·∫£n h·ªìi t·ª´ ch·ªß s·ªü h·ªØu:</div>
                    <p className="text-gray-700 bg-green-50 rounded-lg p-4 border-l-4 border-green-400">{booking.lenderResponse}</p>
                  </div>
                )}
              </div>
            )}
          </div>

          {/* Sidebar */}
          <div className="space-y-6">

            {/* Booking Details */}
            <div className="bg-white rounded-2xl shadow-lg p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">üìã Chi ti·∫øt</h3>

              <div className="space-y-3 text-sm">
                <div className="flex justify-between">
                  <span className="text-gray-600">Ng√†y nh·∫≠n:</span>
                  <span className="font-medium">{new Date(booking.startDate).toLocaleDateString('vi-VN')}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">Ng√†y tr·∫£:</span>
                  <span className="font-medium">{new Date(booking.endDate).toLocaleDateString('vi-VN')}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">Th·ªùi gian:</span>
                  <span className="font-medium">{calculateDuration(booking.startDate, booking.endDate)} ng√†y</span>
                </div>
                <div className="pt-2 border-t">
                  <div className="text-gray-600 mb-1">ƒê·ªãa ƒëi·ªÉm:</div>
                  <div className="font-medium">{booking.toy.location || 'Kh√¥ng x√°c ƒë·ªãnh'}</div>
                </div>
                {booking.paymentInfo && (
                  <div className="pt-2 border-t">
                    <div className="text-gray-600 mb-1">Thanh to√°n:</div>
                    <div className="font-medium">{booking.paymentInfo.amount?.toLocaleString('vi-VN')} VNƒê</div>
                    <div className="text-sm text-gray-500">{booking.paymentInfo.method}</div>
                  </div>
                )}
              </div>
            </div>

            {/* Owner Contact */}
            <div className="bg-white rounded-2xl shadow-lg p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">üë§ Ch·ªß s·ªü h·ªØu</h3>

              <div className="flex items-center space-x-3 mb-4">
                <div className="w-12 h-12 bg-gradient-to-r from-pink-500 to-purple-500 rounded-full flex items-center justify-center text-white font-bold">
                  {booking.toy.owner?.name?.charAt(0)?.toUpperCase() || 'U'}
                </div>
                <div>
                  <div className="font-medium text-gray-900">{booking.toy.owner?.name || 'Kh√¥ng x√°c ƒë·ªãnh'}</div>
                  <div className="text-sm text-gray-500">Ch·ªß s·ªü h·ªØu</div>
                </div>
              </div>

              <div className="space-y-3">
                {booking.toy.owner?.phone && (
                  <a 
                    href={`tel:${booking.toy.owner.phone}`}
                    className="w-full bg-green-100 text-green-700 px-4 py-3 rounded-xl font-medium hover:bg-green-200 transition-colors flex items-center justify-center gap-2"
                  >
                    <span>üìû</span>
                    <span>G·ªçi ƒëi·ªán</span>
                  </a>
                )}
                {booking.toy.owner?.email && (
                  <a 
                    href={`mailto:${booking.toy.owner.email}`}
                    className="w-full bg-blue-100 text-blue-700 px-4 py-3 rounded-xl font-medium hover:bg-blue-200 transition-colors flex items-center justify-center gap-2"
                  >
                    <span>üìß</span>
                    <span>Email</span>
                  </a>
                )}
              </div>
            </div>

            {/* Actions */}
            <div className="bg-white rounded-2xl shadow-lg p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">‚ö° H√†nh ƒë·ªông</h3>

              <div className="space-y-3">
                {mapStatus(booking.status) === 'active' && (
                  <button 
                    onClick={handleReturnToy}
                    disabled={updateBookingStatus.isLoading}
                    className="w-full bg-green-500 text-white px-4 py-3 rounded-xl font-semibold hover:bg-green-600 transition-colors disabled:opacity-50"
                  >
                    ‚úÖ X√°c nh·∫≠n tr·∫£ v·ªÅ
                  </button>
                )}

                {mapStatus(booking.status) === 'pending' && (
                  <button 
                    onClick={handleCancelBooking}
                    disabled={updateBookingStatus.isLoading}
                    className="w-full bg-red-500 text-white px-4 py-3 rounded-xl font-semibold hover:bg-red-600 transition-colors disabled:opacity-50"
                  >
                    ‚ùå H·ªßy y√™u c·∫ßu
                  </button>
                )}

                {mapStatus(booking.status) === 'completed' && (
                  <button className="w-full bg-yellow-500 text-white px-4 py-3 rounded-xl font-semibold hover:bg-yellow-600 transition-colors">
                    ‚≠ê ƒê√°nh gi√° tr·∫£i nghi·ªám
                  </button>
                )}

                <Link 
                  to="/bookings"
                  className="w-full bg-gray-100 text-gray-700 px-4 py-3 rounded-xl font-semibold hover:bg-gray-200 transition-colors text-center block"
                >
                  ‚Üê Quay l·∫°i danh s√°ch
                </Link>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

export default BookingDetail