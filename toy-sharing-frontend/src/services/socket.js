import { io } from "socket.io-client";

class ChatService {
  constructor() {
    this.socket = null;
    this.isConnected = false;
    this.eventListeners = new Map();
    this.reconnectAttempts = 0;
    this.maxReconnectAttempts = 5;
    this.reconnectDelay = 1000;
  }

  /**
   * K·∫øt n·ªëi v·ªõi chat server
   * @param {string} token - JWT token ƒë·ªÉ x√°c th·ª±c
   * @returns {Promise<boolean>} K·∫øt qu·∫£ k·∫øt n·ªëi
   */
  connect(token = null) {
    return new Promise((resolve, reject) => {
      try {
        // L·∫•y token t·ª´ localStorage n·∫øu kh√¥ng ƒë∆∞·ª£c truy·ªÅn v√†o
        const authToken = token || localStorage.getItem("token");

        if (!authToken) {
          reject(new Error("Kh√¥ng c√≥ token x√°c th·ª±c"));
          return;
        }

        // T·∫°o k·∫øt n·ªëi Socket.IO
        this.socket = io("http://localhost:3000", {
          auth: { token: authToken },
          transports: ["polling", "websocket"], // ∆Øu ti√™n polling tr∆∞·ªõc, sau ƒë√≥ websocket
          upgrade: true, // Cho ph√©p upgrade t·ª´ polling l√™n websocket
          rememberUpgrade: true, // Ghi nh·ªõ transport ƒë√£ upgrade
          timeout: 10000,
          reconnection: true,
          reconnectionAttempts: this.maxReconnectAttempts,
          reconnectionDelay: this.reconnectDelay,
          forceNew: true, // T·∫°o connection m·ªõi m·ªói l·∫ßn
          autoConnect: true, // T·ª± ƒë·ªông k·∫øt n·ªëi
        });

        this.setupEventListeners();
        this.setupReconnectionHandling();

        // ƒê·ª£i k·∫øt n·ªëi th√†nh c√¥ng
        this.socket.once("connect", () => {
          this.isConnected = true;
          this.reconnectAttempts = 0;
          console.log("‚úÖ ƒê√£ k·∫øt n·ªëi v·ªõi chat server");
          resolve(true);
        });

        // X·ª≠ l√Ω l·ªói k·∫øt n·ªëi
        this.socket.once("connect_error", (error) => {
          console.error("‚ùå L·ªói k·∫øt n·ªëi chat server:", error);
          console.error("üîç Chi ti·∫øt l·ªói:", {
            message: error.message,
            type: error.type,
            description: error.description,
            context: error.context,
          });
          this.isConnected = false;
          reject(error);
        });

        // X·ª≠ l√Ω l·ªói transport
        this.socket.on("error", (error) => {
          console.error("‚ùå Socket transport error:", error);
        });

        // X·ª≠ l√Ω upgrade transport
        this.socket.on("upgrade", () => {
          console.log("üîÑ Socket transport upgraded to WebSocket");
        });

        // X·ª≠ l√Ω downgrade transport
        this.socket.on("downgrade", () => {
          console.log("üîÑ Socket transport downgraded to polling");
        });

        // Timeout k·∫øt n·ªëi
        setTimeout(() => {
          if (!this.isConnected) {
            reject(new Error("Timeout k·∫øt n·ªëi chat server"));
          }
        }, 10000);
      } catch (error) {
        console.error("‚ùå L·ªói kh·ªüi t·∫°o chat service:", error);
        reject(error);
      }
    });
  }

  /**
   * Thi·∫øt l·∫≠p c√°c event listeners c∆° b·∫£n
   */
  setupEventListeners() {
    if (!this.socket) return;

    // K·∫øt n·ªëi th√†nh c√¥ng
    this.socket.on("connect", () => {
      this.isConnected = true;
      this.reconnectAttempts = 0;
      console.log("‚úÖ ƒê√£ k·∫øt n·ªëi v·ªõi chat server");
      this.emit("user_online", { timestamp: new Date().toISOString() });
    });

    // Ng·∫Øt k·∫øt n·ªëi
    this.socket.on("disconnect", (reason) => {
      this.isConnected = false;
      console.log("‚ùå ƒê√£ ng·∫Øt k·∫øt n·ªëi chat server:", reason);

      if (reason === "io server disconnect") {
        // Server ng·∫Øt k·∫øt n·ªëi, th·ª≠ k·∫øt n·ªëi l·∫°i
        this.socket.connect();
      }
    });

    // L·ªói socket
    this.socket.on("error", (error) => {
      console.error("‚ùå Socket error:", error);
    });

    // K·∫øt n·ªëi l·∫°i
    this.socket.on("reconnect", (attemptNumber) => {
      console.log(`‚úÖ ƒê√£ k·∫øt n·ªëi l·∫°i sau ${attemptNumber} l·∫ßn th·ª≠`);
      this.isConnected = true;
      this.reconnectAttempts = 0;
    });

    // L·ªói k·∫øt n·ªëi l·∫°i
    this.socket.on("reconnect_error", (error) => {
      console.error("‚ùå L·ªói k·∫øt n·ªëi l·∫°i:", error);
      this.reconnectAttempts++;
    });

    // K·∫øt n·ªëi l·∫°i th·∫•t b·∫°i
    this.socket.on("reconnect_failed", () => {
      console.error("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi l·∫°i sau nhi·ªÅu l·∫ßn th·ª≠");
      this.isConnected = false;
    });
  }

  /**
   * X·ª≠ l√Ω k·∫øt n·ªëi l·∫°i t·ª± ƒë·ªông
   */
  setupReconnectionHandling() {
    if (!this.socket) return;

    this.socket.on("disconnect", (reason) => {
      if (reason === "io client disconnect") {
        // Client ng·∫Øt k·∫øt n·ªëi c√≥ ch·ªß √Ω, kh√¥ng t·ª± ƒë·ªông k·∫øt n·ªëi l·∫°i
        return;
      }

      // T·ª± ƒë·ªông k·∫øt n·ªëi l·∫°i sau m·ªôt kho·∫£ng th·ªùi gian
      setTimeout(
        () => {
          if (
            !this.isConnected &&
            this.reconnectAttempts < this.maxReconnectAttempts
          ) {
            console.log(
              `üîÑ ƒêang th·ª≠ k·∫øt n·ªëi l·∫°i... (${this.reconnectAttempts + 1}/${this.maxReconnectAttempts})`
            );
            this.socket.connect();
          }
        },
        this.reconnectDelay * (this.reconnectAttempts + 1)
      );
    });
  }

  /**
   * G·ª≠i event ƒë·∫øn server
   * @param {string} event - T√™n event
   * @param {any} data - D·ªØ li·ªáu g·ª≠i
   */
  emit(event, data) {
    if (!this.socket || !this.isConnected) {
      console.warn("‚ö†Ô∏è Socket ch∆∞a k·∫øt n·ªëi, kh√¥ng th·ªÉ g·ª≠i event:", event);
      return false;
    }

    try {
      this.socket.emit(event, data);
      return true;
    } catch (error) {
      console.error("‚ùå L·ªói g·ª≠i event:", event, error);
      return false;
    }
  }

  /**
   * L·∫Øng nghe event t·ª´ server
   * @param {string} event - T√™n event
   * @param {Function} callback - H√†m x·ª≠ l√Ω
   */
  on(event, callback) {
    if (!this.socket) {
      console.warn("‚ö†Ô∏è Socket ch∆∞a k·∫øt n·ªëi, kh√¥ng th·ªÉ l·∫Øng nghe event:", event);
      return;
    }

    // L∆∞u callback ƒë·ªÉ c√≥ th·ªÉ remove sau
    if (!this.eventListeners.has(event)) {
      this.eventListeners.set(event, []);
    }
    this.eventListeners.get(event).push(callback);

    this.socket.on(event, callback);
  }

  /**
   * L·∫Øng nghe event m·ªôt l·∫ßn
   * @param {string} event - T√™n event
   * @param {Function} callback - H√†m x·ª≠ l√Ω
   */
  once(event, callback) {
    if (!this.socket) {
      console.warn("‚ö†Ô∏è Socket ch∆∞a k·∫øt n·ªëi, kh√¥ng th·ªÉ l·∫Øng nghe event:", event);
      return;
    }

    this.socket.once(event, callback);
  }

  /**
   * Ng·ª´ng l·∫Øng nghe event
   * @param {string} event - T√™n event
   * @param {Function} callback - H√†m x·ª≠ l√Ω c·ª• th·ªÉ (optional)
   */
  off(event, callback = null) {
    if (!this.socket) return;

    if (callback) {
      this.socket.off(event, callback);

      // X√≥a callback kh·ªèi danh s√°ch
      if (this.eventListeners.has(event)) {
        const callbacks = this.eventListeners.get(event);
        const index = callbacks.indexOf(callback);
        if (index > -1) {
          callbacks.splice(index, 1);
        }
      }
    } else {
      this.socket.off(event);
      this.eventListeners.delete(event);
    }
  }

  /**
   * G·ª≠i tin nh·∫Øn
   * @param {string} receiverId - ID ng∆∞·ªùi nh·∫≠n
   * @param {string} content - N·ªôi dung tin nh·∫Øn
   * @param {string} messageType - Lo·∫°i tin nh·∫Øn (m·∫∑c ƒë·ªãnh: "text")
   * @returns {Promise<Object>} K·∫øt qu·∫£ g·ª≠i tin nh·∫Øn
   */
  sendMessage(receiverId, content, messageType = "text") {
    return new Promise((resolve, reject) => {
      if (!this.isConnected) {
        reject(new Error("Socket ch∆∞a k·∫øt n·ªëi"));
        return;
      }

      const messageData = {
        receiverId,
        content,
        messageType,
        timestamp: new Date().toISOString(),
      };

      // G·ª≠i tin nh·∫Øn
      this.emit("send_message", messageData);

      // L·∫Øng nghe ph·∫£n h·ªìi
      this.once("message_sent", (data) => {
        if (data.success) {
          resolve(data.message);
        } else {
          reject(new Error(data.error || "Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn"));
        }
      });

      // Timeout
      setTimeout(() => {
        reject(new Error("Timeout g·ª≠i tin nh·∫Øn"));
      }, 10000);
    });
  }

  /**
   * B·∫Øt ƒë·∫ßu g√µ
   * @param {string} receiverId - ID ng∆∞·ªùi nh·∫≠n
   */
  startTyping(receiverId) {
    this.emit("typing_start", { receiverId });
  }

  /**
   * D·ª´ng g√µ
   * @param {string} receiverId - ID ng∆∞·ªùi nh·∫≠n
   */
  stopTyping(receiverId) {
    this.emit("typing_stop", { receiverId });
  }

  /**
   * ƒê√°nh d·∫•u tin nh·∫Øn ƒë√£ ƒë·ªçc
   * @param {string} senderId - ID ng∆∞·ªùi g·ª≠i
   */
  markAsRead(senderId) {
    this.emit("mark_read", { senderId });
  }

  /**
   * Tham gia conversation
   * @param {string} conversationId - ID conversation
   */
  joinConversation(conversationId) {
    this.emit("join_conversation", { conversationId });
  }

  /**
   * R·ªùi conversation
   * @param {string} conversationId - ID conversation
   */
  leaveConversation(conversationId) {
    this.emit("leave_conversation", { conversationId });
  }

  /**
   * Ng·∫Øt k·∫øt n·ªëi
   */
  disconnect() {
    if (this.socket) {
      this.socket.disconnect();
      this.socket = null;
      this.isConnected = false;
      this.eventListeners.clear();
      console.log("üîå ƒê√£ ng·∫Øt k·∫øt n·ªëi chat server");
    }
  }

  /**
   * Ki·ªÉm tra tr·∫°ng th√°i k·∫øt n·ªëi
   * @returns {boolean} Tr·∫°ng th√°i k·∫øt n·ªëi
   */
  getConnectionStatus() {
    return this.isConnected;
  }

  /**
   * Test k·∫øt n·ªëi ƒë·ªÉ debug
   * @returns {Promise<Object>} Th√¥ng tin k·∫øt n·ªëi
   */
  testConnection() {
    return new Promise((resolve, reject) => {
      if (!this.socket) {
        reject(new Error("Socket ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o"));
        return;
      }

      const connectionInfo = {
        connected: this.socket.connected,
        id: this.socket.id,
        transport: this.socket.io.engine.transport.name,
        readyState: this.socket.io.engine.readyState,
        url: this.socket.io.uri,
        auth: this.socket.auth,
      };

      console.log("üîç Th√¥ng tin k·∫øt n·ªëi:", connectionInfo);
      resolve(connectionInfo);
    });
  }

  /**
   * Test k·∫øt n·ªëi ƒë·ªÉ debug
   * @returns {Promise<Object>} Th√¥ng tin k·∫øt n·ªëi
   */
  testConnection() {
    return new Promise((resolve, reject) => {
      if (!this.socket) {
        reject(new Error("Socket ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o"));
        return;
      }

      const connectionInfo = {
        connected: this.socket.connected,
        id: this.socket.id,
        transport: this.socket.io.engine.transport.name,
        readyState: this.socket.io.engine.readyState,
        url: this.socket.io.uri,
        auth: this.socket.auth,
      };

      console.log("üîç Th√¥ng tin k·∫øt n·ªëi:", connectionInfo);
      resolve(connectionInfo);
    });
  }

  /**
   * L·∫•y socket instance (ƒë·ªÉ debug)
   * @returns {Socket|null} Socket instance
   */
  getSocket() {
    return this.socket;
  }
}

// T·∫°o instance singleton
const chatService = new ChatService();

export default chatService;
export { ChatService };
